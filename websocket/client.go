// Code generated by go-bindata.
// sources:
// websocket/client.html
// DO NOT EDIT!

package ws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _websocketClientHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xcf\x6b\x13\x4f\x14\xbf\xe7\xaf\x98\x0e\x7c\x61\xcb\x57\x77\xbc\x08\xa1\xce\xee\xc1\x5a\xa8\x50\x51\xb0\x20\x1e\x27\x3b\x2f\xcd\xd0\xc9\xcc\x32\xf3\x76\xd7\x52\x02\x7a\xf0\x24\x2a\x62\x41\xbc\x78\xf3\x24\xd2\x83\xb7\x7a\xf0\xaf\xa9\xb6\xff\x85\xec\x4e\xda\xc6\x64\x53\x93\x2a\xf8\x2e\x99\x1f\xef\xe7\xe7\x7d\x32\x6f\xf9\xca\x9d\xfb\xeb\xdb\x8f\x1f\x6c\x90\x01\x0e\x75\xda\xe1\x67\x3f\x20\x64\xda\x21\x84\x10\x3e\x04\x14\x24\x1b\x08\xe7\x01\x13\x5a\x60\xff\x7a\x97\x8e\xaf\x7c\xe6\x54\x8e\x61\x53\x4b\xa5\x8c\xb4\x55\x2c\xa4\xdc\x28\xc1\xe0\x96\xf2\x08\x06\x5c\x44\xb5\x15\x92\x5e\x23\xfd\xc2\x64\xa8\xac\x89\xa0\xc4\x55\xb2\x7f\x6e\x57\x4b\x29\x1c\xb1\x05\xe6\x05\x92\x84\x48\x9b\x15\x43\x30\x18\xef\x00\x6e\x68\xa8\x97\xb7\xf7\xee\xca\x88\x06\x0d\xba\x7a\x6b\xc6\x56\x99\xdf\x98\x36\x0a\x6d\x96\x95\x9f\x3d\xcb\x9d\x32\xb5\xb7\xf3\x8c\x87\xe0\xbd\xd8\x81\xe9\xac\xcf\xf4\xe5\x64\xe4\xcc\x81\x40\x18\x07\x8f\xa8\x54\xe5\x74\xd8\x5a\x64\xac\x8c\x01\xb7\xb9\x7d\x6f\x8b\x24\x64\xec\x7f\x56\x2d\x54\x1c\x8b\x3c\x07\x23\xd7\x07\x4a\xcb\x48\x4e\x79\x1b\xfd\xba\x9d\x0f\x5e\x0e\x86\xae\xc6\xd6\x64\x5a\x65\xbb\x93\xd5\xb5\xf4\xa3\x16\xd5\x27\x51\xe5\xdb\x6e\x6a\x71\x80\x85\x33\xa4\x2f\xb4\x6f\xc9\x7b\x34\x73\x52\x79\x92\x10\x03\x15\x79\x04\xbd\x87\x36\xdb\x05\x8c\x68\xe5\xd7\x18\xd3\x36\x13\x7a\x60\x3d\xae\x75\xbb\xdd\x2e\xab\x7c\x1b\x5c\x95\x8f\xad\xa9\x2b\x58\x20\xef\x5a\x9a\x0e\x46\xf4\xf8\xeb\xd1\x8f\x4f\x2f\x4e\xbe\x7d\xf8\xfe\xea\x63\x9b\xdb\xb6\x34\x1b\x84\xac\x87\x25\x23\x3d\xff\x72\xfa\xee\xf3\xfc\x48\x17\x10\x14\x5a\x2f\x9c\xc8\x98\x17\x4b\xa6\xf2\xf6\xe5\xf1\xd1\xc1\x1a\xa1\xe4\x7f\x02\x25\xc6\x52\xa0\x58\xbc\x76\x70\xce\xba\xe5\x02\x9e\x1e\xbc\x3f\x39\x3c\xbc\x42\xc0\xf9\x1c\x5a\x94\xd4\x1e\x8c\x5c\x9a\xd4\x2b\x7f\x8f\xd5\x67\x90\xbf\x7e\x73\xfa\xf4\x59\x40\xa0\x79\x69\xe2\x52\xe8\x02\xda\x89\x5c\xe7\x1c\x5d\xae\xf5\xe7\xc0\x34\x14\xfe\x97\xc8\x54\x3e\x6e\x72\x88\xae\x5a\xde\x68\x6c\xc8\xd9\xe4\xa0\xe1\xa8\x50\x43\xba\xbf\x4f\x62\x32\x1a\x71\x16\xb6\x1d\xce\xc2\xcc\xe2\x3d\x2b\xf7\xd2\x0e\x47\xd1\xab\x8f\x83\x85\x4b\x39\x4a\x52\x0a\xad\x76\x4c\x42\xd1\xe6\x94\x54\x4a\xe2\x20\xa1\x37\x6f\xfc\x47\x2f\x06\x18\xcf\x27\xd6\x6c\x62\xd3\x1c\xf4\xad\x1b\xa6\x33\xa5\xf0\x5e\x81\x68\x0d\x51\x32\x09\x2f\x6c\x1a\xde\x00\xce\xc2\xc5\xe5\x16\xa1\x4b\x69\x78\x3c\xda\x4d\x78\x18\x6d\xb5\x76\x98\x61\x04\xf7\x72\x48\x28\xc2\x13\xa4\xa4\x21\x50\x42\x37\x41\x6b\x4b\x2a\xeb\xb4\x5c\xa1\x53\xf6\x13\xe1\x9a\x7f\x4b\x1a\xc8\x3a\x27\x1a\xbb\x28\x93\x33\x94\x8b\x22\x27\x55\x19\x20\x08\x13\x3a\xe5\x4c\xaa\x72\xd2\x0d\xab\xbb\xc0\xc6\x6d\xe1\x6c\xdc\x26\xd6\x7c\x70\xfc\x0c\x00\x00\xff\xff\x6c\xaa\x60\x87\x87\x08\x00\x00")

func websocketClientHtmlBytes() ([]byte, error) {
	return bindataRead(
		_websocketClientHtml,
		"websocket/client.html",
	)
}

func websocketClientHtml() (*asset, error) {
	bytes, err := websocketClientHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "websocket/client.html", size: 2183, mode: os.FileMode(420), modTime: time.Unix(1539582601, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"websocket/client.html": websocketClientHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"websocket": &bintree{nil, map[string]*bintree{
		"client.html": &bintree{websocketClientHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
